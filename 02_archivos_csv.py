# -*- coding: utf-8 -*-
"""02 - Archivos CSV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LAoJFHjpStJCCkrHDg2yig2YTDmImFAt

# Manipulación de archivos CSV

Workshop: Masterclass 4.0 --- Ingelearn

Instructor: Ignacio Lavaggi

Los archivos CSV son una de las formas más comunes de almacenar información.
Son aimples archivos de texto, que separan las "columnas" usando algún caracter, usualmente la coma "," o el punto y coma ";"

Ejemplo:

Nro_Medicion,Presion,Temperatura,Humedad

1                     ,10         ,20                 ,4

2                     ,11         ,21                 ,3

## Paso 1: Leer los datos
"""

import pandas as pd
# Si queremos leer un archivo local:
#df = pd.read_csv("PetroleoArg.csv", delimiter=",")

# ----------------------------------------------------------
# Si queremos leer un archivo remoto, como en Google Drive:

#1. Pegar el enlace desde "compartir" de Google Drive. Debe ser un archivo menor a 100 MB.
url = 'https://drive.google.com/file/d/1cgX4y1tfwF1XeqkPG3eVqKYouLCLCjOW/view?usp=sharing'
# 2. Esta línea es auxiliar, no se modifica.
ruta = 'https://drive.google.com/uc?export=download&id='+url.split('/')[-2]

#Leemos el archivo
df = pd.read_csv(ruta)

df.head()

df.shape

"""## Paso 2: Interpretar los datos
Vamos a analizar la información. Separamos aquellas columnas que nos interesan y descartamos las que no
"""

columnas_interesantes = ["empresa","anio","mes","provincia","cantidad","indice_tiempo","areayacimiento","concepto","cuenca"]

datos = df[columnas_interesantes]
datos

"""## Paso 3: Procesar los datos
A partir de aquí, tenemos nuestros datos listos para filtrarlos, agruparlos, y graficarlos, revelando más información que la que hay disponible a simple vista mirando el DataFrame

### Agrupamos los datos por año
"""

promEmpresa = datos.groupby(["anio"]).cantidad.mean()
promEmpresa

"""Lo convertimos a "tabla" agregando nuevamente los índices"""

promEmpresa = promEmpresa.reset_index()
promEmpresa

"""Rellenamos los valores inválidos con ceros"""

promEmpresa = promEmpresa.fillna("0")
promEmpresa

"""## Paso 4: Graficamos

Usamos las bibliotecas MatPlotLib que vimos anteriormente, y Seaborn para darle un mejor formato
"""

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(15,6))
ax = sns.barplot(x="anio", y="cantidad", hue="anio", data=promEmpresa, lw=0)

plt.xlabel('Año')
plt.ylabel('Promedio de producción por año')
plt.savefig('leyenda.png', bbox_inches='tight')
# OPCIONAL: Eliminar la leyenda del gráfico
plt.legend().remove()

# OPCIONAL: Guardar el gráfico en la PC o el PLC
plt.savefig("Promedios.png")
# Mostrar el gráfico sin leyenda
plt.show()

"""## Paso 5: Vamos más allá!

Filtremos la producción, pero solamente de una región.

"""

soloYPF = datos.query("empresa == 'YPF S.A.' and provincia == 'Neuquén'")
soloYPF

"""Graficamos, ésta vez con líneas"""

plt.figure(figsize=(20,8))
sns.set(font_scale=0.5)
ax = sns.lineplot(x="indice_tiempo", y="cantidad", hue="anio", data=soloYPF)
plt.xlabel('Fecha')
plt.style.use('ggplot')
plt.autoscale(enable=True, axis='x', tight=True)

plt.ylabel('Producción de YPF en la provincia de Neuquén, M3')
plt.xticks(rotation=45)
plt.show()